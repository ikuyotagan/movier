// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pb/movier.proto

package movier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovierServiceClient is the client API for MovierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovierServiceClient interface {
	// Syncs movies from external sources
	CreateMoviesBatch(ctx context.Context, in *CreateMoviesBatchRequest, opts ...grpc.CallOption) (*CreateMoviesBatchResponse, error)
	GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*GetMoviesResponse, error)
	DeleteMovies(ctx context.Context, in *DeleteMoviesRequest, opts ...grpc.CallOption) (*DeleteMoviesResponse, error)
	GetPersons(ctx context.Context, in *GetPersonsRequest, opts ...grpc.CallOption) (*GetPersonsResponse, error)
	CreatePersonsBatch(ctx context.Context, in *CreatePersonsRequest, opts ...grpc.CallOption) (*CreatePersonsResponse, error)
	GetGenres(ctx context.Context, in *GetGenresRequest, opts ...grpc.CallOption) (*GetGenresResponse, error)
	CreateGenresBatch(ctx context.Context, in *CreateGenresRequest, opts ...grpc.CallOption) (*CreateGenresResponse, error)
}

type movierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovierServiceClient(cc grpc.ClientConnInterface) MovierServiceClient {
	return &movierServiceClient{cc}
}

func (c *movierServiceClient) CreateMoviesBatch(ctx context.Context, in *CreateMoviesBatchRequest, opts ...grpc.CallOption) (*CreateMoviesBatchResponse, error) {
	out := new(CreateMoviesBatchResponse)
	err := c.cc.Invoke(ctx, "/movier.MovierService/CreateMoviesBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movierServiceClient) GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*GetMoviesResponse, error) {
	out := new(GetMoviesResponse)
	err := c.cc.Invoke(ctx, "/movier.MovierService/GetMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movierServiceClient) DeleteMovies(ctx context.Context, in *DeleteMoviesRequest, opts ...grpc.CallOption) (*DeleteMoviesResponse, error) {
	out := new(DeleteMoviesResponse)
	err := c.cc.Invoke(ctx, "/movier.MovierService/DeleteMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movierServiceClient) GetPersons(ctx context.Context, in *GetPersonsRequest, opts ...grpc.CallOption) (*GetPersonsResponse, error) {
	out := new(GetPersonsResponse)
	err := c.cc.Invoke(ctx, "/movier.MovierService/GetPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movierServiceClient) CreatePersonsBatch(ctx context.Context, in *CreatePersonsRequest, opts ...grpc.CallOption) (*CreatePersonsResponse, error) {
	out := new(CreatePersonsResponse)
	err := c.cc.Invoke(ctx, "/movier.MovierService/CreatePersonsBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movierServiceClient) GetGenres(ctx context.Context, in *GetGenresRequest, opts ...grpc.CallOption) (*GetGenresResponse, error) {
	out := new(GetGenresResponse)
	err := c.cc.Invoke(ctx, "/movier.MovierService/GetGenres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movierServiceClient) CreateGenresBatch(ctx context.Context, in *CreateGenresRequest, opts ...grpc.CallOption) (*CreateGenresResponse, error) {
	out := new(CreateGenresResponse)
	err := c.cc.Invoke(ctx, "/movier.MovierService/CreateGenresBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovierServiceServer is the server API for MovierService service.
// All implementations must embed UnimplementedMovierServiceServer
// for forward compatibility
type MovierServiceServer interface {
	// Syncs movies from external sources
	CreateMoviesBatch(context.Context, *CreateMoviesBatchRequest) (*CreateMoviesBatchResponse, error)
	GetMovies(context.Context, *GetMoviesRequest) (*GetMoviesResponse, error)
	DeleteMovies(context.Context, *DeleteMoviesRequest) (*DeleteMoviesResponse, error)
	GetPersons(context.Context, *GetPersonsRequest) (*GetPersonsResponse, error)
	CreatePersonsBatch(context.Context, *CreatePersonsRequest) (*CreatePersonsResponse, error)
	GetGenres(context.Context, *GetGenresRequest) (*GetGenresResponse, error)
	CreateGenresBatch(context.Context, *CreateGenresRequest) (*CreateGenresResponse, error)
	mustEmbedUnimplementedMovierServiceServer()
}

// UnimplementedMovierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovierServiceServer struct {
}

func (UnimplementedMovierServiceServer) CreateMoviesBatch(context.Context, *CreateMoviesBatchRequest) (*CreateMoviesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMoviesBatch not implemented")
}
func (UnimplementedMovierServiceServer) GetMovies(context.Context, *GetMoviesRequest) (*GetMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedMovierServiceServer) DeleteMovies(context.Context, *DeleteMoviesRequest) (*DeleteMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovies not implemented")
}
func (UnimplementedMovierServiceServer) GetPersons(context.Context, *GetPersonsRequest) (*GetPersonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersons not implemented")
}
func (UnimplementedMovierServiceServer) CreatePersonsBatch(context.Context, *CreatePersonsRequest) (*CreatePersonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonsBatch not implemented")
}
func (UnimplementedMovierServiceServer) GetGenres(context.Context, *GetGenresRequest) (*GetGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenres not implemented")
}
func (UnimplementedMovierServiceServer) CreateGenresBatch(context.Context, *CreateGenresRequest) (*CreateGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenresBatch not implemented")
}
func (UnimplementedMovierServiceServer) mustEmbedUnimplementedMovierServiceServer() {}

// UnsafeMovierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovierServiceServer will
// result in compilation errors.
type UnsafeMovierServiceServer interface {
	mustEmbedUnimplementedMovierServiceServer()
}

func RegisterMovierServiceServer(s grpc.ServiceRegistrar, srv MovierServiceServer) {
	s.RegisterService(&MovierService_ServiceDesc, srv)
}

func _MovierService_CreateMoviesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMoviesBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovierServiceServer).CreateMoviesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movier.MovierService/CreateMoviesBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovierServiceServer).CreateMoviesBatch(ctx, req.(*CreateMoviesBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovierService_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovierServiceServer).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movier.MovierService/GetMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovierServiceServer).GetMovies(ctx, req.(*GetMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovierService_DeleteMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovierServiceServer).DeleteMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movier.MovierService/DeleteMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovierServiceServer).DeleteMovies(ctx, req.(*DeleteMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovierService_GetPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovierServiceServer).GetPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movier.MovierService/GetPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovierServiceServer).GetPersons(ctx, req.(*GetPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovierService_CreatePersonsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovierServiceServer).CreatePersonsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movier.MovierService/CreatePersonsBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovierServiceServer).CreatePersonsBatch(ctx, req.(*CreatePersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovierService_GetGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovierServiceServer).GetGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movier.MovierService/GetGenres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovierServiceServer).GetGenres(ctx, req.(*GetGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovierService_CreateGenresBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovierServiceServer).CreateGenresBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movier.MovierService/CreateGenresBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovierServiceServer).CreateGenresBatch(ctx, req.(*CreateGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovierService_ServiceDesc is the grpc.ServiceDesc for MovierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movier.MovierService",
	HandlerType: (*MovierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMoviesBatch",
			Handler:    _MovierService_CreateMoviesBatch_Handler,
		},
		{
			MethodName: "GetMovies",
			Handler:    _MovierService_GetMovies_Handler,
		},
		{
			MethodName: "DeleteMovies",
			Handler:    _MovierService_DeleteMovies_Handler,
		},
		{
			MethodName: "GetPersons",
			Handler:    _MovierService_GetPersons_Handler,
		},
		{
			MethodName: "CreatePersonsBatch",
			Handler:    _MovierService_CreatePersonsBatch_Handler,
		},
		{
			MethodName: "GetGenres",
			Handler:    _MovierService_GetGenres_Handler,
		},
		{
			MethodName: "CreateGenresBatch",
			Handler:    _MovierService_CreateGenresBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/movier.proto",
}
